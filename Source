--[[
	Obfuscated with wfuscator <https://whut.dev/wfuscator/>
	Obfuscation level: STANDARD
	Still a work in progress! Do not deobfuscate!

	Credits: @NWhut <https://whut.dev/>; FiOne by Rerumu;
]]
return(function()local a;do local b=bit32;local c;local d;local e;local f=50;local g={[22]=18,[31]=8,[33]=28,[0]=3,[1]=13,[2]=23,[26]=33,[12]=1,[13]=6,[14]=10,[15]=16,[16]=20,[17]=26,[18]=30,[19]=36,[3]=0,[4]=2,[5]=4,[6]=7,[7]=9,[8]=12,[9]=14,[10]=17,[20]=19,[21]=22,[23]=24,[24]=27,[25]=29,[27]=32,[32]=34,[34]=37,[11]=5,[28]=11,[29]=15,[30]=21,[35]=25,[36]=31,[37]=35}local h={[0]='ABC','ABx','ABC','ABC','ABC','ABx','ABC','ABx','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','AsBx','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','AsBx','AsBx','ABC','ABC','ABC','ABx','ABC'}local i={[0]={b='OpArgR',c='OpArgN'},{b='OpArgK',c='OpArgN'},{b='OpArgU',c='OpArgU'},{b='OpArgR',c='OpArgN'},{b='OpArgU',c='OpArgN'},{b='OpArgK',c='OpArgN'},{b='OpArgR',c='OpArgK'},{b='OpArgK',c='OpArgN'},{b='OpArgU',c='OpArgN'},{b='OpArgK',c='OpArgK'},{b='OpArgU',c='OpArgU'},{b='OpArgR',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgR',c='OpArgN'},{b='OpArgR',c='OpArgN'},{b='OpArgR',c='OpArgN'},{b='OpArgR',c='OpArgR'},{b='OpArgR',c='OpArgN'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgR',c='OpArgU'},{b='OpArgR',c='OpArgU'},{b='OpArgU',c='OpArgU'},{b='OpArgU',c='OpArgU'},{b='OpArgU',c='OpArgN'},{b='OpArgR',c='OpArgN'},{b='OpArgR',c='OpArgN'},{b='OpArgN',c='OpArgU'},{b='OpArgU',c='OpArgU'},{b='OpArgN',c='OpArgN'},{b='OpArgU',c='OpArgN'},{b='OpArgU',c='OpArgN'}}local function j(k,l,m,n)local o=0;for p=l,m,n do local q=256^math.abs(p-l)o=o+q*string.byte(k,p,p)end;return o end;local function r(s,t,u,v)local w=(-1)^b.rshift(v,7)local x=b.rshift(u,7)+b.lshift(b.band(v,0x7F),1)local y=s+b.lshift(t,8)+b.lshift(b.band(u,0x7F),16)local z=1;if x==0 then if y==0 then return w*0 else z=0;x=1 end elseif x==0x7F then if y==0 then return w*1/0 else return w*0/0 end end;return w*2^(x-127)*(1+z/2^23)end;local function A(s,t,u,v,B,C,D,E)local w=(-1)^b.rshift(E,7)local x=b.lshift(b.band(E,0x7F),4)+b.rshift(D,4)local y=b.band(D,0x0F)*2^48;local z=1;y=y+C*2^40+B*2^32+v*2^24+u*2^16+t*2^8+s;if x==0 then if y==0 then return w*0 else z=0;x=1 end elseif x==0x7FF then if y==0 then return w*1/0 else return w*0/0 end end;return w*2^(x-1023)*(z+y/2^52)end;local function F(k,l,m)return j(k,l,m-1,1)end;local function G(k,l,m)return j(k,m-1,l,-1)end;local function H(k,l)return r(string.byte(k,l,l+3))end;local function I(k,l)local s,t,u,v=string.byte(k,l,l+3)return r(v,u,t,s)end;local function J(k,l)return A(string.byte(k,l,l+7))end;local function K(k,l)local s,t,u,v,B,C,D,E=string.byte(k,l,l+7)return A(E,D,C,B,v,u,t,s)end;local L={[4]={little=H,big=I},[8]={little=J,big=K}}local function M(N)local O=N.index;local P=string.byte(N.source,O,O)N.index=O+1;return P end;local function Q(N,R)local S=N.index+R;local T=string.sub(N.source,N.index,S-1)N.index=S;return T end;local function U(N)local R=N:s_szt()local T;if R~=0 then T=string.sub(Q(N,R),1,-2)end;return T end;local function V(R,W)return function(N)local S=N.index+R;local X=W(N.source,N.index,S)N.index=S;return X end end;local function Y(R,W)return function(N)local Z=W(N.source,N.index)N.index=N.index+R;return Z end end;local function _(N)local R=N:s_int()local a0=table.create(R)for p=1,R do local a1=N:s_ins()local a2=b.band(a1,0x3F)local a3=h[a2]local a4=i[a2]local a5={value=a1,op=g[a2],A=b.band(b.rshift(a1,6),0xFF)}if a3=='ABC'then a5.B=b.band(b.rshift(a1,23),0x1FF)a5.C=b.band(b.rshift(a1,14),0x1FF)a5.is_KB=a4.b=='OpArgK'and a5.B>0xFF;a5.is_KC=a4.c=='OpArgK'and a5.C>0xFF;if a2==10 then local m=b.band(b.rshift(a5.B,3),31)if m==0 then a5.const=a5.B else a5.const=b.lshift(b.band(a5.B,7)+8,m-1)end end elseif a3=='ABx'then a5.Bx=b.band(b.rshift(a1,14),0x3FFFF)a5.is_K=a4.b=='OpArgK'elseif a3=='AsBx'then a5.sBx=b.band(b.rshift(a1,14),0x3FFFF)-131071 end;a0[p]=a5 end;return a0 end;local function a6(N)local R=N:s_int()local a0=table.create(R)for p=1,R do local a7=M(N)local a8;if a7==1 then a8=M(N)~=0 elseif a7==3 then a8=N:s_num()elseif a7==4 then a8=U(N)end;a0[p]=a8 end;return a0 end;local function a9(N,k)local R=N:s_int()local a0=table.create(R)for p=1,R do a0[p]=e(N,k)end;return a0 end;local function aa(N)local R=N:s_int()local a0=table.create(R)for p=1,R do a0[p]=N:s_int()end;return a0 end;local function ab(N)local R=N:s_int()local a0=table.create(R)for p=1,R do a0[p]={varname=U(N),startpc=N:s_int(),endpc=N:s_int()}end;return a0 end;local function ac(N)local R=N:s_int()local a0=table.create(R)for p=1,R do a0[p]=U(N)end;return a0 end;function e(N,ad)local ae={}local k=U(N)or ad;ae.source=k;N:s_int()N:s_int()ae.num_upval=M(N)ae.num_param=M(N)M(N)ae.max_stack=M(N)ae.code=_(N)ae.const=a6(N)ae.subs=a9(N,k)aa(N)ab(N)ac(N)for af,ag in ae.code do if ag.is_K then ag.const=ae.const[ag.Bx+1]else if ag.is_KB then ag.const_B=ae.const[ag.B-0xFF]end;if ag.is_KC then ag.const_C=ae.const[ag.C-0xFF]end end end;return ae end;function c(k)local ah;local ai;local aj;local ak;local al;local am;local an;local ao={index=1,source=k}assert(Q(ao,4)=='\27Lua','invalid Lua signature')assert(M(ao)==0x51,'invalid Lua version')assert(M(ao)==0,'invalid Lua format')ai=M(ao)~=0;aj=M(ao)ak=M(ao)al=M(ao)am=M(ao)an=M(ao)~=0;ah=ai and F or G;ao.s_int=V(aj,ah)ao.s_szt=V(ak,ah)ao.s_ins=V(al,ah)if an then ao.s_num=V(am,ah)elseif L[am]then ao.s_num=Y(am,L[am][ai and'little'or'big'])else error('unsupported float size')end;return e(ao,'@wfuscator-vm')end;local function ap(a0,aq)for p,ar in pairs(a0)do if ar.index>=aq then ar.value=ar.store[ar.index]ar.store=ar;ar.index='value'a0[p]=nil end end end;local function as(a0,aq,at)local au=a0[aq]if not au then au={index=aq,store=at}a0[aq]=au end;return au end;local function av(aw,ax)local k=aw.source;error(string.format('%s: %s',k,ax),0)end;local function ay(az,aA,aB)local aC=az.code;local aD=az.subs;local aE=az.vararg;local aF=-1;local aG={}local at=az.memory;local aH=az.pc;while true do local aI=aC[aH]local a2=aI.op;aH=aH+1;if a2<18 then if a2<8 then if a2<3 then if a2<1 then for p=aI.A,aI.B do at[p]=nil end elseif a2>1 then local ar=aB[aI.B]at[aI.A]=ar.store[ar.index]else local aJ,aK;if aI.is_KB then aJ=aI.const_B else aJ=at[aI.B]end;if aI.is_KC then aK=aI.const_C else aK=at[aI.C]end;at[aI.A]=aJ+aK end elseif a2>3 then if a2<6 then if a2>4 then local aL=aI.A;local aM=aI.B;local aq;if aI.is_KC then aq=aI.const_C else aq=at[aI.C]end;at[aL+1]=at[aM]at[aL]=at[aM][aq]else at[aI.A]=aA[aI.const]end elseif a2>6 then local aq;if aI.is_KC then aq=aI.const_C else aq=at[aI.C]end;at[aI.A]=at[aI.B][aq]else local aJ,aK;if aI.is_KB then aJ=aI.const_B else aJ=at[aI.B]end;if aI.is_KC then aK=aI.const_C else aK=at[aI.C]end;at[aI.A]=aJ-aK end else at[aI.A]=at[aI.B]end elseif a2>8 then if a2<13 then if a2<10 then aA[aI.const]=at[aI.A]elseif a2>10 then if a2<12 then local aL=aI.A;local aM=aI.B;local aN=aI.C;local aO;if aM==0 then aO=aF-aL else aO=aM-1 end;local aP=table.pack(at[aL](table.unpack(at,aL+1,aL+aO)))local aQ=aP.n;if aN==0 then aF=aL+aQ-1 else aQ=aN-1 end;table.move(aP,1,aQ,aL,at)else local ar=aB[aI.B]ar.store[ar.index]=at[aI.A]end else local aJ,aK;if aI.is_KB then aJ=aI.const_B else aJ=at[aI.B]end;if aI.is_KC then aK=aI.const_C else aK=at[aI.C]end;at[aI.A]=aJ*aK end elseif a2>13 then if a2<16 then if a2>14 then local aL=aI.A;local aM=aI.B;local aO;if aM==0 then aO=aF-aL else aO=aM-1 end;ap(aG,0)return at[aL](table.unpack(at,aL+1,aL+aO))else local aq,aR;if aI.is_KB then aq=aI.const_B else aq=at[aI.B]end;if aI.is_KC then aR=aI.const_C else aR=at[aI.C]end;at[aI.A][aq]=aR end elseif a2>16 then at[aI.A]=table.create(aI.const)else local aJ,aK;if aI.is_KB then aJ=aI.const_B else aJ=at[aI.B]end;if aI.is_KC then aK=aI.const_C else aK=at[aI.C]end;at[aI.A]=aJ/aK end else at[aI.A]=aI.const end else local aL=aI.A;local aS=at[aL+2]local aq=at[aL]+aS;local aT=at[aL+1]local aU;if aS==math.abs(aS)then aU=aq<=aT else aU=aq>=aT end;if aU then at[aL]=aq;at[aL+3]=aq;aH=aH+aI.sBx end end elseif a2>18 then if a2<28 then if a2<23 then if a2<20 then at[aI.A]=#at[aI.B]elseif a2>20 then if a2<22 then local aL=aI.A;local aM=aI.B;local R;if aM==0 then R=aF-aL+1 else R=aM-1 end;ap(aG,0)return table.unpack(at,aL,aL+R-1)else local aM=aI.B;local T=at[aM]for p=aM+1,aI.C do T=T..at[p]end;at[aI.A]=T end else local aJ,aK;if aI.is_KB then aJ=aI.const_B else aJ=at[aI.B]end;if aI.is_KC then aK=aI.const_C else aK=at[aI.C]end;at[aI.A]=aJ%aK end elseif a2>23 then if a2<26 then if a2>24 then ap(aG,aI.A)else local aJ,aK;if aI.is_KB then aJ=aI.const_B else aJ=at[aI.B]end;if aI.is_KC then aK=aI.const_C else aK=at[aI.C]end;if(aJ==aK)==(aI.A~=0)then aH=aH+aC[aH].sBx end;aH=aH+1 end elseif a2>26 then local aJ,aK;if aI.is_KB then aJ=aI.const_B else aJ=at[aI.B]end;if aI.is_KC then aK=aI.const_C else aK=at[aI.C]end;if(aJ<aK)==(aI.A~=0)then aH=aH+aC[aH].sBx end;aH=aH+1 else local aJ,aK;if aI.is_KB then aJ=aI.const_B else aJ=at[aI.B]end;if aI.is_KC then aK=aI.const_C else aK=at[aI.C]end;at[aI.A]=aJ^aK end else at[aI.A]=aI.B~=0;if aI.C~=0 then aH=aH+1 end end elseif a2>28 then if a2<33 then if a2<30 then local aJ,aK;if aI.is_KB then aJ=aI.const_B else aJ=at[aI.B]end;if aI.is_KC then aK=aI.const_C else aK=at[aI.C]end;if(aJ<=aK)==(aI.A~=0)then aH=aH+aC[aH].sBx end;aH=aH+1 elseif a2>30 then if a2<32 then local aV=aD[aI.Bx+1]local aW=aV.num_upval;local aX;if aW~=0 then aX={}for p=1,aW do local aY=aC[aH+p-1]if aY.op==g[0]then aX[p-1]=as(aG,aY.B,at)elseif aY.op==g[4]then aX[p-1]=aB[aY.B]end end;aH=aH+aW end;at[aI.A]=d(aV,aA,aX)else local aL=aI.A;local aM=aI.B;if not at[aM]~=(aI.C~=0)then at[aL]=at[aM]aH=aH+aC[aH].sBx end;aH=aH+1 end else at[aI.A]=-at[aI.B]end elseif a2>33 then if a2<36 then if a2>34 then local aL=aI.A;local R=aI.B;if R==0 then R=aE.len;aF=aL+R-1 end;table.move(aE.list,1,R,aL,at)else local aL=aI.A;local aZ,aT,aS;aZ=assert(tonumber(at[aL]),'`for` initial value must be a number')aT=assert(tonumber(at[aL+1]),'`for` limit must be a number')aS=assert(tonumber(at[aL+2]),'`for` step must be a number')at[aL]=aZ-aS;at[aL+1]=aT;at[aL+2]=aS;aH=aH+aI.sBx end elseif a2>36 then local aL=aI.A;local aN=aI.C;local R=aI.B;local a_=at[aL]local b0;if R==0 then R=aF-aL end;if aN==0 then aN=aI[aH].value;aH=aH+1 end;b0=(aN-1)*f;table.move(at,aL+1,aL+R,b0+1,a_)else at[aI.A]=not at[aI.B]end else if not at[aI.A]~=(aI.C~=0)then aH=aH+aC[aH].sBx end;aH=aH+1 end else local aL=aI.A;local b1=aL+3;if type(at[aL])=="table"then at[aL+1]=at[aL]at[aL]=pairs(at[aL])end;local b2={at[aL](at[aL+1],at[aL+2])}table.move(b2,1,aI.C,b1,at)if at[b1]~=nil then at[aL+2]=at[b1]aH=aH+aC[aH].sBx end;aH=aH+1 end else aH=aH+aI.sBx end;az.pc=aH end end;function d(ae,aA,b3)local function b4(...)local b5=table.pack(...)local at=table.create(ae.max_stack)local aE={len=0,list={}}table.move(b5,1,ae.num_param,0,at)if ae.num_param<b5.n then local b6=ae.num_param+1;local R=b5.n-ae.num_param;aE.len=R;table.move(b5,b6,b6+R-1,1,aE.list)end;local az={vararg=aE,memory=at,code=ae.code,subs=ae.subs,pc=1}local b7=table.pack(pcall(ay,az,aA,b3))if b7[1]then return table.unpack(b7,2,b7.n)else local aw={pc=az.pc,source=ae.source}return av(aw,b7[2])end end;return b4 end;a=function(b8,aA)return d(c(b8),aA)()end end local e=table.insert;local g=table.create;local bd=math;local aa=95;local n=string.char;local z=22;local p=string.gsub;local o=string.sub;local h=table.pack;local i=table.unpack;local r=ipairs;local q=string.find;local t='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'local v=function(ad,an)local am,ah=1,0;local ae=z+an;while ad>0 and ae>0 do local af,ag=ad%2,ae%2;if af~=ag then ah=ah+am;end;ad=(ad-af)/2;ae=(ae-ag)/2;am=am*2;end;if ad<ae then ad=ae;end;while ad>0 do local af=ad%2;if af>0 then ah=ah+am;end;ad=(ad-af)/2;am=am*2;end;return ah;end;local u=function(ai,an)ai=p(ai,'[^'..t..'=]','')ai=p(ai,'.',function(aj)if(aj=='=')then return''end;local ak,af='',(q(t,aj)-1)for al=6,1,-1 do ak=ak..(af%2^al-af%2^(al-1)>0 and'1'or'0')end;return ak;end)ai=p(ai,'%d%d%d?%d?%d?%d?%d?%d?',function(aj)if(#aj~=8)then return''end;local am=0;for al=1,8 do am=am+(o(aj,al,al)=='1'and 2^(8-al)or 0)end;return n(v(am,an))end)return ai;end;local s=function(ad,an)local am,ah=1,0;local ae=aa+an;while ad>0 and ae>0 do local af,ag=ad%2,ae%2;if af~=ag then ah=ah+am;end;ad=(ad-af)/2;ae=(ae-ag)/2;am=am*2;end;if ad<ae then ad=ae;end;while ad>0 do local af=ad%2;if af>0 then ah=ah+am;end;ad=(ad-af)/2;am=am*2;end;return ah;end;local c,x,w,bh,bc,ao,k,bb,as,l,bk,d,y,be,bg,bi,bl,f,bf,j,m,bj=243,function(ad,am)local ah=g(0)for ae=1,#ad,am do e(ah,o(ad,ae,ae+am-1))end;return ah;end,function(ag)local ah=""repeat local bm=ag/2;local al,bn=bd['modf'](bm)ag=al;ah=bd['ceil'](bn)..ah;until ag==0;return ah;end,print,task,assert,task.wait,table,error,math.random,game,13,(function()ao=function(ap,aq,ar)if not ap then as(aq,2+(ar or 0))end;end;local y=g(0)y['partial']=function(at,...)local au=h(...)local av=h(i(au))return function(...)local au=h(...)local aw=g(0)for ax,ay in r(av)do e(aw,ay)end;for ax,ay in r(h(i(au)))do e(aw,ay)end;return at(i(aw))end;end;return y;end)(),string,loadstring,typeof,UDim2,table.remove,getmetatable,task.spawn,string.len,Enum;local ab=g(0)ab[9]=u("bGFofXd+",2)ab[45]=u("YnlndnR8",1)ab[108]=s(174,77)ab[68]=s(176,81)ab[6]=u("R0VUTUVUQVRBQkxF",10)ab[116]=s(147,52)ab[112]=s(196,101)ab[60]=s(166,71)ab[26]=u("Jw==",1)ab[18]=u("REE=",9)ab[22]=u("",8)ab[21]=u("Dw==",11)ab[97]=s(241,89,367)ab[71]=s(196,103)ab[34]=u("enF4aw==",3)ab[46]=u("bn99dQ==",8)ab[12]=u("TVxxdSo=",2)ab[35]=u("RVFXQA==",12)ab[123]=s(159,105,333,470)ab[113]=s(168,75)ab[90]=s(192,50)ab[3]=u("TUFUSA==",10)ab[109]=s(189,94,493,504)ab[49]=u("Mm90e3h2fzpudTp8c3R+Omx7aHN7eHZ/OnN0Omx3Mw==",4)ab[120]=s(234,57)ab[106]=s(178,81,842)ab[37]=u("bw==",1)ab[89]=s(154,61)ab[76]=s(141,102)ab[74]=s(242,61)ab[122]=s(215,67,201,462)ab[24]=u("",5)ab[104]=s(207,110,141)ab[8]=u("Z2V+eWM=",1)ab[117]=s(183,86)ab[39]=u("bH1uaHV9cA==",6)ab[61]=s(133,114)ab[94]=s(203,108,487)ab[5]=u("cmt6cmlo",5)ab[20]=u("eGxqfQ==",9)ab[80]=s(165,69)ab[78]=s(229,52,787)ab[55]=s(143,88)ab[125]=s(146,50,372)ab[32]=u("bGp9",9)ab[2]=u("Y3ZkfA==",1)ab[29]=u("MnMyczJzKDJzKDJzKDJzKDJzKDJzKA==",1)ab[107]=s(204,111)ab[23]=u("JA==",3)ab[11]=u("e31xeQ==",6)ab[28]=u("fGhueQ==",5)ab[41]=u("V0xSQ0FJ",12)ab[86]=s(156,63)ab[105]=s(178,81)ab[96]=s(171,74,9)ab[52]=s(218,60,727,607,809,565)ab[40]=u("UkNBSQ==",12)ab[79]=s(191,110)ab[101]=s(137,92,203)ab[118]=s(210,83,404)ab[63]=s(147,50,544)ab[87]=s(215,119)ab[31]=u("Ew==",12)ab[43]=u("bXx+dg==",7)ab[65]=s(213,120)ab[88]=s(211,115,568)ab[25]=u("eXZxew==",9)ab[91]=s(243,96)ab[57]=s(175,52,102)ab[38]=u("bw==",8)ab[15]=u("Vg==",11)ab[98]=s(188,85)ab[72]=s(154,57,762,479)ab[62]=s(156,63,453,813,467,241,546)ab[70]=s(184,89)ab[50]=u("",2)ab[64]=s(165,72)ab[110]=s(164,69,972)ab[77]=s(227,66)ab[93]=s(176,81)ab[51]=s(144,106)ab[66]=s(162,65,647,118,16,325)ab[10]=u("XHdsdA==",3)ab[95]=s(175,72)ab[13]=u("ZA==",6)ab[48]=u("bXZoeXtz",2)ab[4]=u("bWpsd3B5",8)ab[73]=s(172,77)ab[56]=s(225,117,635)ab[19]=u("",10)ab[92]=s(190,87)ab[14]=u("ag==",7)ab[30]=u("",1)ab[115]=s(185,90)ab[69]=s(178,81)ab[54]=s(250,66)ab[83]=s(208,113)ab[100]=s(166,107,954)ab[1]=u("an98cns=",8)ab[114]=s(150,53)ab[111]=s(151,54)ab[121]=s(205,70)ab[84]=s(193,97,206)ab[47]=u("SU5TRVJU",10)ab[75]=s(137,113,986)ab[27]=u("Lw==",8)ab[82]=s(189,109,240,566)ab[16]=u("Vg==",12)ab[59]=s(158,64)ab[103]=s(180,85,533,86)ab[36]=u("aA==",5)ab[58]=s(192,62)ab[7]=u("TE9BRFNUUklORw==",10)ab[99]=s(199,103,264)ab[124]=s(250,111)ab[53]=s(236,68,338,437)ab[85]=s(187,90)ab[44]=u("SE9SRFNV",11)ab[67]=s(205,110)ab[102]=s(169,73)ab[81]=s(158,104)ab[33]=u("bA==",2)ab[119]=s(234,58,471,810,993)ab[17]=u("JkY=",5)ab[42]=u("ant5cQ==",4)local ba=function(ar)local ac={[ab[s(185,ab[51],12)]]=bb,[ab[s(195,98,845)]]=bc,[ab[s(163,ab[52],728)]]=bd,[ab[s(170,ab[53],850)]]=be,[ab[s(184,94)]]=r,[ab[s(195,102)]]=bf,[ab[s(189,ab[54])]]=bg,[ab[s(167,80)]]=bh,[ab[s(158,ab[55])]]=bi,[ab[s(153,52)]]=bj,[ab[s(159,ab[56])]]=bk,[ab[s(151,ab[57])]]=bl,}ac[ab[s(160,78)]]=c;ac[ab[s(178,ab[58],696,148)]]=d;ac[ab[s(189,78,157)]]=function(ad,an)local am,ah=ab[59],ab[60];local ae=ac[ab[s(188,ab[61],491,318)]]+an;while ad>ab[68]and ae>ab[67]do local af,ag=ad%ab[62],ae%ab[63];if af~=ag then ah=ah+am;end;ad=(ad-af)/ab[64];ae=(ae-ag)/ab[65];am=am*ab[66]end;if ad<ae then ad=ae;end;while ad>ab[73]do local af=ad%ab[69];if af>ab[70]then ah=ah+am;end;ad=(ad-af)/ab[71];am=am*ab[72]end;return ah;end;ac[ab[s(181,ab[101],108,468,521)]]=function(ai,an)ai=p(ai,ab[s(170,ab[75])]..t..ab[s(220,ab[74])],ab[s(180,ab[76])])ai=p(ai,ab[s(192,ab[78],534,826)],function(aj)if(aj==ab[s(198,ab[79])])then return ab[s(136,63,627,632)]end;local ak,af=ab[s(137,50)],(q(t,aj)-ab[80])for al=ab[89],ab[88],-ab[87]do ak=ak..(af%ab[86]^al-af%ab[85]^(al-ab[84])>ab[83]and ab[s(203,ab[82],564)]or ab[s(176,75)])end;return ak;end)ai=p(ai,ab[s(223,99)],function(aj)if(#aj~=ab[92])then return ab[s(181,ab[91],973,562)]end;local am=ab[93]for al=ab[99],ab[98]do am=am+(o(aj,al,al)==ab[s(189,67)]and ab[96]^(ab[95]-al)or ab[94])end;return n(ac[ab[s(245,117)]](am,an))end)return ai;end;ac[ab[s(145,88)]]=function(ad,an)local am,ah=ab[102],ab[103];local ae=ac[ab[s(182,52)]]+an;while ad>ab[110]and ae>ab[109]do local af,ag=ad%ab[104],ae%ab[105];if af~=ag then ah=ah+am;end;ad=(ad-af)/ab[106];ae=(ae-ag)/ab[107];am=am*ab[108]end;if ad<ae then ad=ae;end;while ad>ab[115]do local af=ad%ab[111];if af>ab[112]then ah=ah+am;end;ad=(ad-af)/ab[113];am=am*ab[114]end;return ah;end;ac[ab[s(162,ab[124])]]=(function()ao=function(ap,aq,ar)if not ap then as(aq,ab[117]+(ar or ab[116]))end;end;local y=g(0)y[ab[s(152,ab[118])]]=function(at,...)local au=h(...)local av=h(i(au))return function(...)local au=h(...)local aw=g(0)for ax,ay in r(av)do e(aw,ay)end;for ax,ay in r(h(i(au)))do e(aw,ay)end;return at(i(aw))end;end;return y;end)();(function(az)end)(ac)return ac;end;return a(ab[s(141,96,225,45)],ba(ab[125]))end)()
